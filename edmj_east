
let param = args.widgetParameter
let url

if (param === "west") {
    url = "https://edmj.beck.space/west.jpg";
} else {
    // Default to east if the parameter is not "west" or is not provided
    url = "https://edmj.beck.space/east.jpg";
}

const imgUrl = url
const imgReq = new Request(imgUrl)
const img = await imgReq.loadImage()

// Function to fetch METAR data
async function fetchMetarData() {
  const metarUrl = "https://tgftp.nws.noaa.gov/data/observations/metar/stations/EDMA.TXT";
  const metarReq = new Request(metarUrl);
  const metarData = await metarReq.loadString();
  const lines = metarData.trim().split("\n");
  return lines.length > 1 ? lines[1] : "No data";
}


// Function to fetch sunrise and sunset times from API
async function fetchSunTimes() {
  try {
    const apiUrl = "https://dwd.api.proxy.bund.dev/v30/stationOverviewExtended?stationIds=10852";
    const apiReq = new Request(apiUrl);
    const apiData = await apiReq.loadJSON();

    if (apiData && apiData["10852"] && apiData["10852"].days) {
      const today = new Date().toISOString().split('T')[0]; // Format: 'YYYY-MM-DD'
      const todayData = apiData["10852"].days.find(d => d.dayDate === today);

      if (todayData) {
        const sunriseDate = new Date(todayData.sunrise);
        const sunsetDate = new Date(todayData.sunset);

        return {
          sunrise: `${sunriseDate.getHours().toString().padStart(2, '0')}:${sunriseDate.getMinutes().toString().padStart(2, '0')}`,
          sunset: `${sunsetDate.getHours().toString().padStart(2, '0')}:${sunsetDate.getMinutes().toString().padStart(2, '0')}`
        };
      }
    }
  } catch (error) {
    console.error(`Error fetching sun times: ${error}`);
  }
  
  return { sunrise: 'Unknown', sunset: 'Unknown' };
}


// Function to print SF Symbols
function printSFSymbol(stack, symbolStr, width) {
  let mobileIcon = SFSymbol.named(symbolStr);
  let mobileIconElement = stack.addImage(mobileIcon.image);
  mobileIconElement.imageSize = new Size(width, width);
  mobileIconElement.tintColor = Color.white();
}

// Fetch METAR and sun times data
const metarText = await fetchMetarData();
const sunTimes = await fetchSunTimes();

// Widget creation
if (config.runsInWidget) {
  let widget = createWidget(img, metarText, sunTimes)
  Script.setWidget(widget)
  Script.complete()
} else {   
  let widget = createWidget(img, metarText, sunTimes)
  await widget.presentLarge()
}

function createWidget(img, metarText, sunTimes) {
  const widget = new ListWidget()
  widget.backgroundColor = Color.black()
  widget.url = url
  widget.backgroundImage = img 

  widget.addSpacer()

  // Title with sunrise and sunset using SF Symbols
  const titleStack = widget.addStack();
  printSFSymbol(titleStack, "sunrise.fill", 10);
  let titleText = titleStack.addText(` ${sunTimes.sunrise} `);
  titleText.font = Font.systemFont(9);  
  titleText.textColor = Color.white();

  printSFSymbol(titleStack, "sunset.fill", 10);
  titleText = titleStack.addText(` ${sunTimes.sunset}`);
  titleText.font = Font.systemFont(9);  
  titleText.textColor = Color.white();

  titleStack.layoutHorizontally();
  titleStack.centerAlignContent();
  widget.addSpacer(2)

  const subtitleText = widget.addText(metarText) // Use METAR data as subtitle
  subtitleText.font = Font.systemFont(8)
  subtitleText.textColor = Color.white()
  subtitleText.textOpacity = 0.8
  subtitleText.shadowRadius = 3
  subtitleText.shadowColor = Color.black()

  return widget
}
