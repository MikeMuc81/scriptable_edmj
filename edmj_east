
let param = args.widgetParameter
let url

if (param === "west") {
    url = "https://edmj.beck.space/west.jpg";
} else {
    // Default to east if the parameter is not "west" or is not provided
    url = "https://edmj.beck.space/east.jpg";
}

const imgUrl = url
const imgReq = new Request(imgUrl)
const img = await imgReq.loadImage()

// Function to fetch METAR data from image URL header
async function fetchMetarData() {
  const response = await imgReq.load();
  const headers = imgReq.response.headers;
  const metarData = headers['x-amz-meta-metar'];
  return metarData ? metarData : "No METAR data available";
}


// Function to fetch sunrise and sunset times from image headers
async function fetchSunTimes() {


  // Extract sunrise and sunset times from headers
  const sunriseTime = imgReq.response.headers["x-amz-meta-sr"];
  const sunsetTime = imgReq.response.headers["x-amz-meta-ss"];

  return {
    sunrise: sunriseTime ? sunriseTime : "No data",
    sunset: sunsetTime ? sunsetTime : "No data"
  };
}


// Function to print SF Symbols
function printSFSymbol(stack, symbolStr, width) {
  let mobileIcon = SFSymbol.named(symbolStr);
  let mobileIconElement = stack.addImage(mobileIcon.image);
  mobileIconElement.imageSize = new Size(width, width);
  mobileIconElement.tintColor = Color.white();
}

// Fetch METAR and sun times data
const metarText = await fetchMetarData();
const sunTimes = await fetchSunTimes();

// Widget creation
if (config.runsInWidget) {
  let widget = createWidget(img, metarText, sunTimes)
  Script.setWidget(widget)
  Script.complete()
} else {   
  let widget = createWidget(img, metarText, sunTimes)
  await widget.presentLarge()
}

function createWidget(img, metarText, sunTimes) {
  const widget = new ListWidget()
  widget.backgroundColor = Color.black()
  widget.url = url
  widget.backgroundImage = img 

  widget.addSpacer()

  // Title with sunrise and sunset using SF Symbols
  const titleStack = widget.addStack();
  printSFSymbol(titleStack, "sunrise.fill", 10);
  let titleText = titleStack.addText(` ${sunTimes.sunrise} UTC `);
  titleText.font = Font.systemFont(9);  
  titleText.textColor = Color.white();

  printSFSymbol(titleStack, "sunset.fill", 10);
  titleText = titleStack.addText(` ${sunTimes.sunset} UTC`);
  titleText.font = Font.systemFont(9);  
  titleText.textColor = Color.white();

  titleStack.layoutHorizontally();
  titleStack.centerAlignContent();
  widget.addSpacer(2)

  const subtitleText = widget.addText(metarText) // Use METAR data as subtitle
  subtitleText.font = Font.systemFont(8)
  subtitleText.textColor = Color.white()
  subtitleText.textOpacity = 0.8
  subtitleText.shadowRadius = 3
  subtitleText.shadowColor = Color.black()

  return widget
}
